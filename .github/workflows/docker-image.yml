name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Flask API image
      uses: docker/build-push-action@v5
      with:
        context: ./src/backend-api
        file: ./src/backend-api/Dockerfile
        push: false
        tags: homelette-flask-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build Flask Socket image
      uses: docker/build-push-action@v5
      with:
        context: ./src/backend-socket
        file: ./src/backend-socket/Dockerfile
        push: false
        tags: homelette-flask-socket:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker Compose
      run: |
        docker compose up -d
        
        # Wait for containers to start
        sleep 30
        
        # Check if containers are running
        if [ "$(docker compose ps -q flask-api | wc -l)" -eq 0 ]; then
          echo "Flask API container failed to start"
          docker compose logs flask-api
          exit 1
        fi
        
        if [ "$(docker compose ps -q flask-socket | wc -l)" -eq 0 ]; then
          echo "Flask Socket container failed to start"
          docker compose logs flask-socket
          exit 1
        fi
        
        if [ "$(docker compose ps -q mariadb | wc -l)" -eq 0 ]; then
          echo "MariaDB container failed to start"
          docker compose logs mariadb
          exit 1
        fi
        
        if [ "$(docker compose ps -q redis | wc -l)" -eq 0 ]; then
          echo "Redis container failed to start"
          docker compose logs redis
          exit 1
        fi
        
        if [ "$(docker compose ps -q nginx | wc -l)" -eq 0 ]; then
          echo "Nginx container failed to start"
          docker compose logs nginx
          exit 1
        fi
        
        # Check if API is responding via Nginx
        HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/health || echo "Failed")
        if [ "$HEALTH_STATUS" != "200" ]; then
          echo "Health check failed (status: $HEALTH_STATUS)"
          docker compose logs
          exit 1
        fi
        
        # Check if API endpoints are accessible
        API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/api/listings || echo "Failed")
        if [ "$API_STATUS" != "200" ]; then
          echo "API endpoints check failed (status: $API_STATUS)"
          docker compose logs flask-api
          exit 1
        fi
        
        echo "Docker Compose test successful!"
        docker compose down
      continue-on-error: true 